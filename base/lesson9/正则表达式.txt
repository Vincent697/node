#正则表达式
```js
\b  //是正则表达式规定的一个特殊代码（好吧，某些人叫它元字符，metacharacter），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是\b并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。

. //是另一个元字符，匹配除了换行符以外的任意字符。

* //同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定*前边的内容可以连续重复使用任意次以使整个表达式得到匹配

\d //是个新的元字符，匹配一位数字(0，或1，或2，或……)

这里\d后面的{2}({8})的意思是前面\d必须连续重复匹配2次(8次)。

\s 匹配任意的空白符，包括空格，制表符（Tab）,换行符，中文全角空格

\w 匹配 字母或数字或下划线或汉子等

+  是和* 类似的元字符 不同的是*匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。



常用的元字符：
.   匹配除换行符以外的任意字符
\w  匹配字母或数字或下划线或汉字
\s  匹配任意的空白符
\d  匹配数字
\b  匹配单词的开始或结束
^   匹配字符串的开始
$   匹配字符串的结束


和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，^和$的意义就变成了匹配行的开始处和结束处。



字符转义：
如果你想查找元字符本身的话，比如你查找.,或者*,
就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。
这时你就得使用\来取消这些字符的特殊意义。
因此，你应该使用\.和\*。当然，要查找\本身，你也得用\\.



常用的限定符：
*   重复零次或更多次
+   重复一次或更多次
?   重复零次或一次
{n} 重复n次
{n,}    重复n次或更多次
{n,m}   重复n到m次



字符类匹配：
很简单，你只需要在方括号里列出它们就行了，
像：
[aeiou]就匹配任何一个英文元音字母，
[.?!]匹配标点符号(.或?或!)。
[0-9] 代表的含义与\d 就是完全一致的
[a-z0-9A-Z_] 也是完全等同于 \w (只考虑英文的情况下)



分枝条件：（注意匹配顺序）
在正则表达式里的 分枝条件 指的是几种规则，如果满足其中的任意一种规则都应该当成匹配
具体方法是用 | 把不同的规则隔开
0\d{2}-\d{8}|0\d{3}-\d{7}
--- 匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。

\(?0\d{2}\)?[- ]?\d{8}|0\d{2}[- ]?\d{8}
--- 这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔

\d{5}-\d{4}|\d{5} 匹配美国的邮政编码，美国邮编的规则是5位数字，或者用连字号间隔的9位数字

使用分枝条件时，要注意各个条件的顺序。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。



分组：
使用小括号来指定子表达式（也叫分组），然后你就可以指定这个字表达式的重复次数了也可以对字表达式进行一些其他的操作

(\d{1,3}\.){3}\d{1,3} 这是一个简单的IP地址匹配表达式 ，（有缺陷）

((2[0-4]\d|25[0-5])|[01]?\d\d?\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?) 这是一个正确的IP地址

IP地址中每个数字都不能大于255. 经常有人问我, 01.02.03.04 这样前面带有0的数字, 是不是正确的IP地址呢? 答案是: 是的, IP 地址里的数字可以包含有前导 0 (leading zeroes).



反义：
\W       匹配任意不是字母，数字，下划线，汉字的字符
\S       匹配任意不是空白符的字符
\D       匹配任意非数字的字符
\B       匹配不是单词开头或结束的位置
[^x]     匹配除了x以外的任意字符
[^aeiou] 匹配除了aeiou这几个字母以外的任意字符
例子：
\S+匹配不包含空白符的字符串。
<a[^>]+>匹配用尖括号括起来的以a开头的字符串。



后向引用：
使用小括号指定一个字表达式后，匹配这个字表达式的文本（也就是分组捕获的内容）可以在表达式或其他程序中作进一步处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分则的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推
后向引用用于重复搜索前面某个分组匹配的文本

\b(\w+)\b\s+\1\b 可以用来匹配重复的单词，like: go go , kitty kitty 
---解析：首先是一个单词，也就是单词开始处和单词结束处之间的多于一个的字母或者数字（\b(\w+)\b）,这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符（\s+）,最后是分组1中捕获的内容（也就是前面匹配的那个单词）（\1）

你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?<Word>\w+)(或者把尖括号换成'也行：(?'Word'\w+)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\k<Word>,所以上一个例子也可以写成这样：\b(?<Word>\w+)\b\s+\k<Word>\b。



零宽断言：
接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言

(?=exp) 也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp
like: \b\w+(?=ing\b),匹配以ing结尾的单词的前面的部分（除了ing 以外的部分）
如查找I'm singing while you're dancing.时，它会匹配sing和danc。

(?<=exp) 也叫零宽度正回顾后发断言 它断言自身出现的位置的前面能匹配表达式exp。
比如(?<=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，
例如在查找reading a book时，它匹配ading。




负向零宽断言：
\b\w*q[^u]\w*\b  匹配包含后面不是字母u的字母q的单词  （有缺陷 像Iraq 匹配就会出错）

负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：\b\w*q(?!u)\w*\b。

零宽度负预测先行断言(?!exp)，
断言此位置的后面不能匹配表达式exp。
例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；
\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。

零宽度负回顾后发断言 (?<!exp) 来断言此位置的前面不能匹配表达式exp
(?<![a-z])\d{7}匹配前面不是小写字母的七位数字。

(?<=<(\w+)>).*(?=<\/\1>) 匹配不包含属性的简单HTML标签里的内容
---解析：(?<=<(\w+)>)指定了这样的前缀：被尖括号括起来的单词（比如可能是<b>）,然后是.*(任意字符串)，最后是一个后缀(?=<\/\1>>)。注意后缀里的\/, 它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的(\w+)匹配的内容，这样如果前缀实际上是<b>的话，后缀就是</b>了。整个表达式匹配的是<b>和</b>之间的内容(再次提醒，不包括前缀和后缀本身)。


注释：
小括号的另外一种用途是通过语法(?#comment)来包含注释
例如：2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)

要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。
例如，我们可以前面的一个表达式写成这样：
(?<=    # 断言要匹配的文本的前缀
<(\w+)> # 查找尖括号括起来的字母或数字(即HTML/XML标签)
)       # 前缀结束
.*      # 匹配任意文本
(?=     # 断言要匹配的文本的后缀
<\/\1>  # 查找尖括号括起来的内容：前面是一个"/"，后面是先前捕获的标签
)       # 后缀结束


贪婪与懒惰：
当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。

有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：

a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。

懒惰限定符

*?      重复任意次，但尽可能少重复
+?      重复1次或更多次，但尽可能少重复
??      重复0次或1次，但尽可能少重复
{n,m}?  重复n到m次，但尽可能少重复
{n,}?   重复n次以上，但尽可能少重复

为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？
简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权


处理选项：

常用的处理选项

IgnoreCase(忽略大小写)   匹配时不区分大小写。

Multiline(多行模式)  更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)

Singleline(单行模式)    更改.的含义，使它与每一个字符匹配（包括换行符\n）。

IgnorePatternWhitespace(忽略空白)   忽略表达式中的非转义空白并启用由#标记的注释。

ExplicitCapture(显式捕获)   仅捕获已被显式命名的组。





\a               报警字符(打印它的效果是电脑嘀一声)
\b               通常是单词分界位置，但如果在字符类里使用代表退格
\t               制表符，Tab
\r               回车
\v               竖向制表符
\f               换页符
\n               换行符
\e               Escape
\xnn             ASCII代码中十六进制代码为nn的字符
\unnnn           Unicode代码中十六进制代码为nnnn的字符
\cN              ASCII控制字符。比如\cC代表Ctrl+C
\A               字符串开头(类似^，但不受处理多行选项的影响)
\Z               字符串结尾或行尾(不受处理多行选项的影响)
\z               字符串结尾(类似$，但不受处理多行选项的影响)
\G               当前搜索的开头
\p{name}         Unicode中命名为name的字符类，例如\p{IsGreek}
(?>exp)          贪婪子表达式
(?<x>-<y>exp)    平衡组
(?im-nsx:exp)    在子表达式exp中改变处理选项
(?im-nsx)        为表达式后面的部分改变处理选项
(?(exp)yes|no)  把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no
(?(exp)yes)      同上，只是使用空表达式作为no
(?(name)yes|no)  如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no
(?(name)yes)     同上，只是使用空表达式作为no



```



##例子

```

\ba\w*\b 匹配以字母a开头的单词

\d+ 匹配1个或更多连续的数字

\b\w{6}\b 匹配刚好6个字符的单词

^\d{5,12}$ 匹配5~12位的数字

deerchao\.net  匹配deerchao.net

C:\\Windows    匹配C:\Windows。

Windows\d+  匹配Window后面跟一个或者更多数字

^\w+ 匹配一行的第一个单词(或者整个字符串的第一个单词，具体匹配哪个意思得看选项设置)

\(?0\d{2}[) -]?\d{8} 可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等
--- 首先是一个转义字符\(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。

假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，

你可以这样查找需要在前面和里面添加逗号的部分：((?<=\d)\d{3})+\b，
用它对1234567890进行查找时结果是234567890。

下面这个例子同时使用了这两种断言：(?<=\s)\d+(?=\s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)。


```